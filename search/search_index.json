{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to GigaSpatial","text":"<p>GigaSpatial is a powerful Python package designed for spatial data analysis and processing, providing efficient tools and utilities for handling geographic information systems (GIS) data.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Efficient Data Processing: Fast and memory-efficient processing of large spatial datasets</li> <li>Multiple Format Support: Support for various spatial data formats</li> <li>Advanced Analysis Tools: Comprehensive set of spatial analysis tools</li> <li>Easy Integration: Seamless integration with popular GIS and data science libraries</li> <li>Scalable Solutions: Designed to handle both small and large-scale spatial data processing tasks</li> </ul>"},{"location":"#quick-links","title":"Quick Links","text":"<ul> <li>Installation Guide</li> <li>Quick Start Tutorial</li> <li>API Reference</li> <li>Example Gallery</li> </ul>"},{"location":"#getting-help","title":"Getting Help","text":"<p>If you need help using GigaSpatial, please check out our:</p> <ul> <li>User Guide for detailed usage instructions</li> <li>API Reference for detailed function and class documentation</li> <li>GitHub Issues for bug reports and feature requests</li> <li>Contributing Guide for guidelines on how to contribute to the project</li> </ul>"},{"location":"#license","title":"License","text":"<p>GigaSpatial is released under the MIT License. See the LICENSE file for more details. </p>"},{"location":"changelog/","title":"Changelog","text":"<p>All notable changes to this project will be documented in this file.</p>"},{"location":"changelog/#v021-2025-02-28","title":"[v0.2.1] - 2025-02-28","text":""},{"location":"changelog/#added","title":"Added","text":"<ul> <li>Introduced WorldPopDownloader feature to handlers</li> <li>Refactored TifProcessor class for better performance</li> </ul>"},{"location":"changelog/#fixed","title":"Fixed","text":"<ul> <li>Minor bug fixes and performance improvements</li> </ul>"},{"location":"changelog/#v020-maxarimagedownloader-bug-fixes-2025-02-24","title":"[v0.2.0] - MaxarImageDownloader &amp; Bug Fixes - 2025-02-24","text":"<ul> <li>New Handler: MaxarImageDownloader for downloading Maxar images.</li> <li>Bug Fixes: Various improvements and bug fixes.</li> <li>Enhancements: Minor optimizations in handlers.</li> </ul>"},{"location":"changelog/#v011-2025-02-24","title":"[v0.1.1] - 2025-02-24","text":""},{"location":"changelog/#added_1","title":"Added","text":"<ul> <li>Local Data Store: Introduced a new local data store alongside ADLS to improve data storage and read/write functionality.</li> <li>Boundaries Handler: Added <code>boundaries.py</code>, a new handler that allows to read administrative boundaries from GADM.</li> </ul>"},{"location":"changelog/#changed","title":"Changed","text":"<ul> <li>Handler Refactoring: Refactored existing handlers to improve modularity and data handling.</li> <li>Configuration Management: Added <code>config.py</code> to manage paths, runtime settings, and environment variables.</li> </ul>"},{"location":"changelog/#removed","title":"Removed","text":"<ul> <li>Administrative Schema: Removed <code>administrative.py</code> since its functionality is now handled by the <code>boundaries</code> handler.</li> <li>Globals Module: Removed <code>globals.py</code> and replaced it with <code>config.py</code> for better configuration management.</li> </ul>"},{"location":"changelog/#updated-files","title":"Updated Files","text":"<ul> <li><code>config.py</code></li> <li><code>boundaries.py</code></li> <li><code>google_open_buildings.py</code></li> <li><code>mapbox_image.py</code></li> <li><code>microsoft_global_buildings.py</code></li> <li><code>ookla_speedtest.py</code></li> <li><code>mercator_tiles.py</code></li> <li><code>adls_data_store.py</code></li> <li><code>data_store.py</code></li> <li><code>local_data_store.py</code></li> <li><code>readers.py</code></li> <li><code>writers.py</code></li> <li><code>entity.py</code></li> </ul>"},{"location":"changelog/#v010-2025-02-07","title":"[v0.1.0] - 2025-02-07","text":""},{"location":"changelog/#added_2","title":"Added","text":"<ul> <li>New data handlers: <code>google_open_buildings.py</code>, <code>microsoft_global_buildings.py</code>, <code>overture.py</code>, <code>mapbox_image.py</code>, <code>osm.py</code></li> <li>Processing functions in <code>tif_processor.py</code>, <code>geo.py</code> and <code>transform.py</code></li> <li>Grid generation modules: <code>h3_tiles.py</code>, <code>mercator_tiles.py</code></li> <li>View managers: <code>grid_view.py</code> and <code>national_view.py</code></li> <li>Schemas: <code>administrative.py</code></li> </ul>"},{"location":"changelog/#changed_1","title":"Changed","text":"<ul> <li>Updated <code>requirements.txt</code> with new dependencies</li> <li>Improved logging and data storage mechanisms</li> </ul>"},{"location":"changelog/#removed_1","title":"Removed","text":"<ul> <li>Deprecated views: <code>h3_view.py</code>, <code>mercator_view.py</code></li> </ul>"},{"location":"contributing/","title":"Contribution Guidelines","text":"<p>Thank you for considering contributing to Giga! We value your input and aim to make the contribution process as accessible and transparent as possible. Whether you're interested in reporting bugs, discussing code, submitting fixes, proposing features, becoming a maintainer, or engaging with the Giga community, we welcome your involvement.</p>"},{"location":"contributing/#how-to-contribute-to-our-giga-project","title":"How to Contribute to our Giga Project?","text":"<ol> <li>Familiarize Yourself: Before contributing, familiarize yourself with the project by reviewing the README, code of conduct, and existing issues or pull requests.</li> <li>Issues and Feature Requests: Check the issue tracker for existing issues or create a new one to report bugs, suggest improvements, or propose new features.</li> <li>Fork and Branch: Fork the repository and create a branch for your contribution. Branch names should be descriptive (e.g., feature/add-new-functionality, bugfix/issue-description).</li> <li>Code Changes: Make changes or additions following our coding conventions and style guide. Ensure to write clear commit messages that explain the purpose of each commit.</li> <li>Testing: If applicable, include tests for the changes made to ensure code reliability. Ensure existing tests pass.</li> <li>Documentation: Update relevant documentation, including README files or any other necessary guides.</li> <li>Pull Request: Open a pull request (PR) against the main branch. Clearly describe the changes introduced, referencing any related issues.</li> </ol>"},{"location":"contributing/#report-a-bug-or-suggestion","title":"Report a Bug or Suggestion","text":"<ul> <li>Bug Reports: Help us understand and address issues by submitting detailed bug reports via GitHub issues. Include as many relevant details as possible in the provided template to expedite resolutions.</li> <li>Suggestions: Share your ideas, feedback, or stay updated on Giga by joining our Discord channel.</li> </ul>"},{"location":"contributing/#making-changes-and-pull-requests","title":"Making Changes and Pull Requests","text":"<p>To contribute code changes:</p> <ol> <li>Fork the repository and create a new branch for your contribution  <p><code>git checkout -b 'my-contribution'</code>.</p> </li> <li>Make your changes on the created branch.</li> <li>Commit with clear messages describing the updates.</li> <li>Submit a pull request in the main repository, ensuring the following:</li> <li>Clear use case or demonstration of bug fix/new feature.</li> <li>Inclusion of relevant tests (unit, functional, and fuzz tests where applicable).</li> <li>Adherence to code style guidelines.</li> <li>No breaking changes to the existing test suite.</li> <li>Bug fixes accompanied by tests to prevent regression.</li> <li>Update of relevant comments and documentation reflecting code behavior changes.</li> </ol>"},{"location":"contributing/#contributing-with-an-issue","title":"Contributing with an Issue","text":"<p>If you encounter a bug but aren't sure how to fix it or submit a pull request, you can create an issue. Issues serve as avenues for bug reports, feedback, and general discussions within the GigaSpatial GitHub repository.</p>"},{"location":"contributing/#other-ways-to-contribute","title":"Other Ways to Contribute","text":"<p>Beyond code contributions:</p> <ul> <li>Feedback and Insights: Share your expertise and experiences related to cash transfer by contacting us at giga@unicef.org.</li> <li>Documentation: Contribute to our journey by sharing reports, case studies, articles, blogs, or surveys. Contact us to contribute and learn more via giga@unicef.org.</li> <li>Designs: If you're passionate about UI/UX, animations, graphics, tutorials, etc., contact us to create visuals for the Giga community via giga@unicef.org.</li> </ul>"},{"location":"contributing/#connect-with-giga-contributors","title":"Connect with Giga Contributors","text":"<p>Connect with fellow contributors via our Discord channel to engage with the Giga community: Click</p>"},{"location":"api/","title":"API Reference","text":"<p>Welcome to the GigaSpatial API reference documentation. This section provides detailed information about all public modules, classes, and functions in GigaSpatial.</p>"},{"location":"api/#api-structure","title":"API Structure","text":"<p>GigaSpatial's API is organized into several main components:</p>"},{"location":"api/#core-module","title":"Core Module","text":"<p>The core module contains the fundamental classes and functions for spatial data processing:</p> <ul> <li>Spatial data structures</li> <li>Basic geometric operations</li> <li>Coordinate system management</li> <li>Data input/output operations</li> </ul>"},{"location":"api/#utilities","title":"Utilities","text":"<p>The utilities module provides helper functions and tools for:</p> <ul> <li>Data conversion</li> <li>Format transformation</li> <li>Validation</li> <li>Common spatial operations</li> </ul>"},{"location":"api/#data-types","title":"Data Types","text":"<p>The data types module defines the fundamental data structures:</p> <ul> <li>Vector geometries</li> <li>Raster data structures</li> <li>Spatial reference objects</li> <li>Custom data types</li> </ul>"},{"location":"api/#using-the-api","title":"Using the API","text":""},{"location":"api/#installation","title":"Installation","text":"<p>Since GigaSpatial is currently in development, you'll need to install it directly from the repository:</p> <pre><code># Clone the repository\ngit clone https://github.com/unicef/giga-spatial\ncd giga-spatial\n\n# Create and activate a virtual environment (recommended)\npython -m venv venv\nsource venv/bin/activate  # On Windows, use: venv\\Scripts\\activate\n\n# Install in development mode with all dependencies\npip install -e \".[dev,test]\"\n</code></pre>"},{"location":"api/#import-convention","title":"Import Convention","text":"<p>Once installed, you can import GigaSpatial components. The recommended way is:</p> <pre><code># Import the main package\nfrom gigaspatial import GigaSpatial\n\n# Create a GigaSpatial instance\ngs = GigaSpatial()\n\n# For specific functionality\nfrom gigaspatial.core import spatial_operations\nfrom gigaspatial.utils import data_helpers\nfrom gigaspatial.io import readers, writers\n</code></pre>"},{"location":"api/#basic-usage-example","title":"Basic Usage Example","text":"<p>Here's a simple example of using GigaSpatial:</p> <pre><code>from gigaspatial import GigaSpatial\nfrom gigaspatial.io import readers\n\n# Initialize GigaSpatial\ngs = GigaSpatial()\n\n# Load some spatial data\ndata = readers.read_geojson(\"path/to/your/data.geojson\")\n\n# Perform spatial analysis\nprocessed_data = gs.process(data, operation=\"buffer\", distance=1000)\n\n# Save results\nprocessed_data.save(\"output.geojson\")\n</code></pre>"},{"location":"api/#error-handling","title":"Error Handling","text":"<p>GigaSpatial uses a hierarchy of custom exceptions for clear error handling:</p> <pre><code>from gigaspatial.exceptions import (\n    GigaSpatialError,  # Base exception class\n    GeometryError,     # For geometric operation errors\n    InputError,        # For invalid input data\n    TransformError     # For coordinate transformation errors\n)\n\ntry:\n    result = gs.process(data)\nexcept GeometryError as e:\n    print(f\"Geometry processing failed: {e}\")\nexcept InputError as e:\n    print(f\"Invalid input data: {e}\")\n</code></pre>"},{"location":"api/#type-hints","title":"Type Hints","text":"<p>All public APIs include type hints for better IDE integration and code checking:</p> <pre><code>from typing import List, Optional\nfrom gigaspatial.types import Geometry, SpatialReference\n\ndef process_geometries(\n    geometries: List[Geometry],\n    sref: Optional[SpatialReference] = None,\n    tolerance: float = 0.001\n) -&gt; List[Geometry]:\n    \"\"\"Process a list of geometries with optional spatial reference.\"\"\"\n    ...\n</code></pre>"},{"location":"api/#version-compatibility","title":"Version Compatibility","text":"<ul> <li>API stability is guaranteed for all releases following semantic versioning</li> <li>Breaking changes are only introduced in major version updates</li> <li>Deprecation warnings are issued at least one minor version before removal</li> <li>Development versions can be installed using <code>pip install -e git+https://github.com/unicef/giga-spatial.git#egg=gigaspatial</code></li> </ul>"},{"location":"api/#contributing","title":"Contributing","text":"<p>If you'd like to contribute to the API:</p> <ol> <li>Read our Contributing Guide</li> <li>Follow our Code Style Guide</li> <li>Submit a pull request with your changes</li> </ol>"},{"location":"api/#need-help","title":"Need Help?","text":"<p>If you need assistance with the API:</p> <ul> <li>Check the examples in each module's documentation</li> <li>Look at the Examples section</li> <li>Create an issue on our GitHub repository</li> </ul>"},{"location":"examples/","title":"Examples Gallery","text":"<p>Welcome to the GigaSpatial Examples Gallery. This section provides a collection of practical examples and tutorials to help you understand how to use GigaSpatial effectively.</p>"},{"location":"examples/#example-categories","title":"Example Categories","text":""},{"location":"examples/#basic-examples","title":"Basic Examples","text":"<p>The Basic Examples section covers fundamental operations:</p> <ul> <li>Downloading, loading and saving spatial data</li> <li>Basic geometric operations</li> <li>Common data transformations</li> </ul>"},{"location":"examples/#advanced-examples","title":"Advanced Examples","text":"<p>The Advanced Examples section demonstrates more complex use cases:</p> <ul> <li>Complex spatial analysis</li> <li>Performance optimization</li> <li>Custom processing pipelines</li> <li>Advanced visualization techniques</li> </ul>"},{"location":"examples/#use-cases","title":"Use Cases","text":"<p>The Use Cases section shows real-world applications:</p> <ul> <li>Infrastructure mapping</li> <li>Demographic studies</li> </ul>"},{"location":"examples/#interactive-examples","title":"Interactive Examples","text":"<p>All examples are provided as both markdown documentation and Jupyter notebooks. You can:</p> <ol> <li>Read through the examples online</li> <li>Download and run the notebooks locally</li> <li>Modify the code to suit your needs</li> </ol>"},{"location":"examples/#running-the-examples","title":"Running the Examples","text":"<p>To run these examples locally, follow these steps:</p> <pre><code># Clone the repository\ngit clone https://github.com/unicef/giga-spatial\ncd giga-spatial\n\n# Create and activate a virtual environment (recommended)\npython -m venv venv\nsource venv/bin/activate  # On Windows, use: venv\\Scripts\\activate\n\n# Install Jupyter if not already installed\npip install jupyter\n\n# Launch Jupyter notebook\njupyter notebook examples/\n</code></pre>"},{"location":"examples/#dependencies","title":"Dependencies","text":"<p>The examples require additional dependencies that are specified in the <code>[examples]</code> extra. These include:</p> <ul> <li><code>jupyter</code>: For running the notebook examples</li> <li><code>geopandas</code>: For working with geospatial data</li> <li><code>rasterio</code>: For raster data processing</li> </ul> <p>You can install specific example dependencies based on your needs:</p> <pre><code># For basic examples only\npip install -e \".[examples-basic]\"\n\n# For all examples including advanced ones\npip install -e \".[examples-full]\"\n</code></pre>"},{"location":"examples/#contributing-examples","title":"Contributing Examples","text":"<p>We welcome contributions to our example gallery! To contribute:</p> <ol> <li>Follow our Contributing Guide</li> <li>Use our example template</li> <li>Submit a pull request</li> </ol>"},{"location":"examples/#need-help","title":"Need Help?","text":"<p>If you need assistance with the examples:</p> <ul> <li>Check our User Guide</li> <li>Visit our API Reference</li> <li>Create an issue on our GitHub repository </li> </ul>"},{"location":"examples/basic/","title":"Data Handler Examples","text":"<p>This guide provides examples of how to use various data handlers in GigaSpatial to access and process different types of spatial data.</p>"},{"location":"examples/basic/#population-data-worldpop","title":"Population Data (WorldPop)","text":"<pre><code>from gigaspatial.handlers.worldpop import WorldPopHandler\n\n# Get population data for a specific country and year\nconfig = {\n    \"country_code\": \"KEN\",\n    \"year\": 2020,\n}\n\n# Initialize the WorldPop handler\nworldpop = WorldPopDownloader(config = config)\npath_to_data = worldpop.download_dataset()\n</code></pre>"},{"location":"examples/basic/#building-footprints","title":"Building Footprints","text":""},{"location":"examples/basic/#google-open-buildings","title":"Google Open Buildings","text":"<pre><code>from gigaspatial.handlers.google_open_buildings import GoogleOpenBuildingsDownloader, GoogleOpenBuildingsMapper\nfrom gigaspatial.handlers.boundaries import AdminBoundaries\nfrom gigaspatial.core.io.local_data_store import LocalDataStore\nimport geopandas as gpd\n\n# Initialize downloader\ndata_store = LocalDataStore()\ndownloader = GoogleOpenBuildingsDownloader(data_store=data_store)\n\n# Example 1: Estimate download size for a given country\ncountry_code = \"KEN\"  # Kenya\ngdf_admin0 = AdminBoundaries.create(country_code=country_code, admin_level=0).to_geodataframe()\nestimated_size = downloader.get_download_size_estimate(gdf_admin0)\nprint(f\"Estimated download size for {country_code}: {estimated_size:.2f} MB\")\n\n# Example 2: Download buildings data for a country\nfile_paths = downloader.download_by_country(country_code, data_type=\"polygons\")\nprint(f\"Downloaded files: {file_paths}\")\n\n# Example 3: Download buildings data for specific points\npoints_gdf = gpd.GeoDataFrame(\n    {\"geometry\": [gpd.points_from_xy([36.8219], [-1.2921])]}, crs=\"EPSG:4326\"\n)  # Nairobi, Kenya\nfile_paths = downloader.download_by_points(points_gdf, data_type=\"points\")\nprint(f\"Downloaded files: {file_paths}\")\n\n# Example 4: Load downloaded data and map nearest buildings\nmapper = GoogleOpenBuildingsMapper()\n\ntiles_gdf = downloader._get_intersecting_tiles(gdf_admin0)\npolygon_data = mapper.load_data(tiles_gdf, data_type=\"polygons\")\nprint(f\"Loaded {len(polygon_data)} building polygons\")\n\n# Example 5: Find the nearest building for a given point\nnearest_buildings = mapper.map_nearest_building(points_gdf)\nprint(nearest_buildings)\n</code></pre>"},{"location":"examples/basic/#microsoft-global-buildings","title":"Microsoft Global Buildings","text":"<pre><code>from gigaspatial.handlers.microsoft_global_buildings import MSBuildingsDownloader\n\n# Initialize the handler\nmgb = MSBuildingsDownloader()\n\npoints = [(1.25214, 5.5124), (3.45234, 12.51232)]\n\n# Get building footprints\nlist_of_paths = mgb.download_by_points(\n    points=points\n)\n</code></pre>"},{"location":"examples/basic/#satellite-imagery","title":"Satellite Imagery","text":""},{"location":"examples/basic/#maxar-imagery","title":"Maxar Imagery","text":"<pre><code>from gigaspatial.handlers.maxar_image import MaxarImageHandler\n\n# Initialize woith default config which reads credentials config from your environment\nmaxar = MaxarImageDownloader()\n\n# Download imagery\nmaxar.download_images_by_coordinates(\n    data=coordinates,\n    res_meters_pixel=0.6,\n    output_dir=\"bronze/maxar\",\n    bbox_size = 300.0,\n    image_prefix = \"maxar_\"\n)\n</code></pre>"},{"location":"examples/basic/#mapbox-imagery","title":"Mapbox Imagery","text":"<pre><code>from gigaspatial.handlers.mapbox_image import MapboxImageDownloader\n\n# Initialize with your access token or config will be read from your environment\nmapbox = MapboxImageDownloader(access_token=\"your_access_token\", style_id=\"mapbox/satellite-v9\")\n\n# Get satellite imagery\nmapbox.download_images_by_coordinates(\n    data=coordinates,\n    res_meters_pixel=300.0,\n    output_dir=\"bronze/mapbox\",\n    image_size=(256,256),\n    image_prefix=\"mapbox_\"\n)\n</code></pre>"},{"location":"examples/basic/#internet-speed-data-ookla","title":"Internet Speed Data (Ookla)","text":"<pre><code>from gigaspatial.core.io.local_data_store import LocalDataStore\nfrom gigaspatial.handlers.ookla_speedtest import (\n    OoklaSpeedtestTileConfig, CountryOoklaTiles\n)\n\n# Initialize OoklaSpeedtestTileConfig for a specific quarter and year\nookla_config = OoklaSpeedtestTileConfig(\n    service_type=\"fixed\", year=2023, quarter=3, data_store=LocalDataStore())\n\n# Download and read the Ookla tile data\ndf = ookla_config.read_tile()\nprint(df.head())  # Display the first few rows of the dataset\n\n# Generate country-specific Ookla tiles\ncountry_ookla_tiles = CountryOoklaTiles.from_country(\"KEN\", ookla_config)\n\n# Convert to DataFrame and display\ncountry_df = country_ookla_tiles.to_dataframe()\nprint(country_df.head())\n\n# Convert to GeoDataFrame and display\ncountry_gdf = country_ookla_tiles.to_geodataframe()\nprint(country_gdf.head())\n</code></pre>"},{"location":"examples/basic/#administrative-boundaries","title":"Administrative Boundaries","text":"<pre><code>from gigaspatial.handlers.boundaries import AdminBoundaries\n\n# Load level-1 administrative boundaries for Kenya\nadmin_boundaries = AdminBoundaries.create(country_code=\"KEN\", admin_level=1)\n\n# Convert to a GeoDataFrame\ngdf = admin_boundaries.to_geodataframe()\n</code></pre>"},{"location":"examples/basic/#openstreetmap-data","title":"OpenStreetMap Data","text":"<pre><code>from gigaspatial.handlers.osm import OSMAmenityFetcher\n\n# Example 1: Fetching school amenities in Kenya\nfetcher = OSMAmenityFetcher(country_iso2=\"KE\", amenity_types=[\"school\"])\nschools_df = fetcher.get_locations()\nprint(schools_df.head())\n\n# Example 2: Fetching hospital and clinic amenities in Tanzania\nfetcher = OSMAmenityFetcher(country_iso2=\"TZ\", amenity_types=[\"hospital\", \"clinic\"])\nhealthcare_df = fetcher.get_locations()\nprint(healthcare_df.head())\n\n# Example 3: Fetching restaurant amenities in Ghana since 2020\nfetcher = OSMAmenityFetcher(country_iso2=\"GH\", amenity_types=[\"restaurant\"])\nrestaurants_df = fetcher.get_locations(since_year=2020)\nprint(restaurants_df.head())\n</code></pre>"},{"location":"examples/basic/#overture-places","title":"Overture Places","text":"<pre><code>from gigaspatial.handlers.overture import OvertureAmenityFetcher\nfrom shapely.geometry import Polygon\nimport geopandas as gpd\n\n# Initialize the fetcher with country ISO3 code and amenity types\nfetcher = OvertureAmenityFetcher(country_iso3='KEN', amenity_types=['school', 'hospital'])\n\n# Example 1: Fetching all amenities for a given release\ngdf_all = fetcher.get_locations(release='2024-01-01')\nprint(gdf_all.head())\n\n# Example 2: Fetching amenities within a specific bounding polygon\npolygon = Polygon([(36.8, -1.3), (36.9, -1.3), (36.9, -1.2), (36.8, -1.2), (36.8, -1.3)])\ngdf_filtered = fetcher.get_locations(release='2024-01-01', geometry=polygon)\nprint(gdf_filtered.head())\n</code></pre>"},{"location":"examples/basic/#combining-multiple-data-sources","title":"Combining Multiple Data Sources","text":"<p>Here's an example of how to combine multiple data sources for analysis:</p> <pre><code># Initialize handlers\nbuildings = GoogleOpenBuildingsHandler()\npopulation = WorldPopHandler()\nboundaries = BoundariesHandler()\n\n# Get administrative boundaries\nadmin_areas = boundaries.get_admin_boundaries(\n    country_code=\"KEN\",\n    admin_level=2\n)\n\n# Get building footprints and population data\nfor area in admin_areas.itertuples():\n    # Get buildings\n    area_buildings = buildings.get_buildings(\n        geometry=area.geometry\n    )\n\n    # Get population\n    area_population = population.get_population_stats(\n        boundaries=area.geometry,\n        year=2020\n    )\n\n    # Calculate metrics\n    building_density = len(area_buildings) / area.geometry.area\n    population_density = area_population['total_population'] / area.geometry.area\n\n    # Your analysis here...\n</code></pre>"},{"location":"examples/basic/#best-practices","title":"Best Practices","text":"<ol> <li>Cache downloaded data when possible</li> <li>Use appropriate spatial indices for large datasets</li> <li>Handle errors and edge cases gracefully</li> <li>Consider memory usage when working with large areas</li> </ol>"},{"location":"examples/basic/#additional-resources","title":"Additional Resources","text":"<ul> <li>Check the API Reference for detailed method documentation</li> <li>See Advanced Features for more complex usage</li> <li>Review the Contributing Guide if you want to add new handlers</li> </ul>"},{"location":"getting-started/installation/","title":"Installation Guide","text":""},{"location":"getting-started/installation/#prerequisites","title":"Prerequisites","text":"<p>Before installing GigaSpatial, ensure you have the following prerequisites:</p> <ul> <li>Python 3.10 or higher</li> </ul>"},{"location":"getting-started/installation/#installation-methods","title":"Installation Methods","text":"<p>Since GigaSpatial is currently in development, you'll need to install it directly from the repository:</p> <pre><code># Clone the repository\ngit clone https://github.com/unicef/giga-spatial\ncd giga-spatial\n\n# Create and activate a virtual environment (recommended)\npython -m venv venv\nsource venv/bin/activate  # On Windows, use: venv\\Scripts\\activate\npip install -r requirements.txt\n</code></pre>"},{"location":"getting-started/installation/#dependencies","title":"Dependencies","text":"<p>GigaSpatial requires the following main dependencies:</p> <ul> <li>numpy</li> <li>pandas</li> <li>geopandas</li> <li>rasterio</li> <li>shapely</li> <li>pyproj</li> </ul> <p>These dependencies will be automatically installed when you install GigaSpatial using pip.</p>"},{"location":"getting-started/installation/#verifying-installation","title":"Verifying Installation","text":"<p>To verify that GigaSpatial is installed correctly, you can run:</p> <pre><code>import gigaspatial\nprint(gigaspatial.__version__)\n</code></pre>"},{"location":"getting-started/installation/#troubleshooting","title":"Troubleshooting","text":"<p>If you encounter any issues during installation:</p> <ol> <li>Ensure your Python version is compatible</li> <li>Update pip to the latest version: <code>pip install --upgrade pip</code></li> <li>Check our GitHub Issues for known problems</li> <li>If the problem persists, please open a new issue </li> </ol>"},{"location":"getting-started/quickstart/","title":"Quick Start Guide","text":"<p>This guide will help you get started with GigaSpatial by walking through some basic examples.</p>"},{"location":"getting-started/quickstart/#basic-usage","title":"Basic Usage","text":""},{"location":"getting-started/quickstart/#importing-gigaspatial","title":"Importing GigaSpatial","text":"<pre><code>import gigaspatial as gs\n</code></pre>"},{"location":"getting-started/quickstart/#next-steps","title":"Next Steps","text":"<ul> <li>Check out the User Guide for more detailed information</li> <li>Explore the API Reference for complete documentation</li> <li>See more Examples for additional use cases</li> <li>Learn about Advanced Features </li> </ul>"},{"location":"user-guide/","title":"User Guide","text":"<p>Welcome to the GigaSpatial User Guide. This guide provides comprehensive documentation on how to use GigaSpatial effectively for your spatial data analysis needs.</p>"},{"location":"user-guide/#overview","title":"Overview","text":"<p>GigaSpatial is designed to make spatial data analysis and processing both powerful and accessible. Whether you're working with small datasets or processing terabytes of geographic information, GigaSpatial provides the tools you need.</p>"},{"location":"user-guide/#guide-structure","title":"Guide Structure","text":"<ul> <li>Basic Usage: Learn the fundamentals of GigaSpatial, including data loading, basic operations, and visualization</li> <li>Advanced Features: Explore powerful features for complex spatial analysis and large-scale data processing</li> <li>Best Practices: Discover recommended patterns and practices for efficient and maintainable code</li> </ul>"},{"location":"user-guide/#key-concepts","title":"Key Concepts","text":""},{"location":"user-guide/#data-models","title":"Data Models","text":"<p>GigaSpatial uses efficient data models optimized for spatial operations:</p> <ul> <li>Vector Data: Points, lines, and polygons</li> <li>Raster Data: Grid-based spatial data</li> <li>Metadata: Spatial reference systems and attributes</li> </ul>"},{"location":"user-guide/#processing-pipeline","title":"Processing Pipeline","text":"<p>A typical GigaSpatial workflow consists of:</p> <ol> <li>Data Loading</li> <li>Preprocessing</li> <li>Analysis</li> <li>Visualization</li> <li>Export</li> </ol>"},{"location":"user-guide/#performance-considerations","title":"Performance Considerations","text":"<p>GigaSpatial is built with performance in mind:</p> <ul> <li>Efficient memory usage for large datasets</li> <li>Parallel processing capabilities</li> <li>Optimized spatial algorithms</li> <li>Caching mechanisms for repeated operations</li> </ul>"},{"location":"user-guide/#getting-started","title":"Getting Started","text":"<p>If you're new to GigaSpatial, we recommend starting with:</p> <ol> <li>Installation Guide</li> <li>Quick Start Tutorial</li> <li>Basic Usage Guide</li> </ol>"},{"location":"user-guide/#need-help","title":"Need Help?","text":"<p>If you need assistance:</p> <ul> <li>Check our Examples section</li> <li>Visit our GitHub repository</li> <li>Read through our API Reference </li> </ul>"}]}